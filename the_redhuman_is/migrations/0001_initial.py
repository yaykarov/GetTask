# Generated by Django 3.2.12 on 2022-03-30 10:54

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import the_redhuman_is.models.contract
import the_redhuman_is.models.delivery
import the_redhuman_is.models.fine_utils
import the_redhuman_is.models.itella
import the_redhuman_is.models.kuehne_nagel
import the_redhuman_is.models.models
import the_redhuman_is.models.photo
import the_redhuman_is.models.vkusvill
import the_redhuman_is.models.worker
import uuid

from the_redhuman_is.models.models import timesheet_upload_location
from the_redhuman_is.models.customer_specific.kari import _kari_upload_location


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('finance', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountablePerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_71', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='finance.account')),
            ],
        ),
        migrations.CreateModel(
            name='AmountCalculator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_object_id', models.PositiveIntegerField()),
                ('worker_object_id', models.PositiveIntegerField()),
                ('foreman_object_id', models.PositiveIntegerField()),
                ('customer_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_amount_calculator', to='contenttypes.contenttype')),
                ('foreman_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='foreman_amount_calculator', to='contenttypes.contenttype')),
                ('worker_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='worker_amount_calculator', to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='ArrivalLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время прибытия')),
                ('confirmed', models.BooleanField(verbose_name='Подтверждено оператором')),
                ('is_suspicious', models.BooleanField(default=True, verbose_name='Отметка подозрительна')),
            ],
        ),
        migrations.CreateModel(
            name='AssignedWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmed', models.BooleanField(default=False, verbose_name='Подтверждено (оператором или рабочим)')),
                ('confirmed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Подтвердивший')),
            ],
        ),
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('account_51', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bank_51_account', to='finance.account', verbose_name='51 Счет')),
                ('account_90_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bank_90_2_account', to='finance.account', verbose_name='90.2 Счет')),
            ],
        ),
        migrations.CreateModel(
            name='BankCalculatorCommission1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('val', models.FloatField(verbose_name='От исходящей суммы')),
            ],
        ),
        migrations.CreateModel(
            name='BankCalculatorCommission2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('val', models.FloatField(verbose_name='От входящей суммы')),
            ],
        ),
        migrations.CreateModel(
            name='BankCalculatorCommissionFix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('val', models.FloatField(verbose_name='Фикс')),
            ],
        ),
        migrations.CreateModel(
            name='BankService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Перевод', 'Перевод'), ('Перевод поставщику', 'Перевод поставщику'), ('Кассовая операция', 'Кассовая операция')], default='Перевод', max_length=100, verbose_name='Тип')),
                ('debit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.account')),
            ],
        ),
        migrations.CreateModel(
            name='BoxType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Тип')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorHourly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tariff', models.FloatField(verbose_name='Ставка в час')),
                ('bonus', models.FloatField(default=0, verbose_name='Премия')),
                ('threshold', models.IntegerField(default=11, verbose_name='Бонус при часах')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorInterval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin', models.FloatField(verbose_name='Начало интервала')),
                ('k', models.FloatField(verbose_name='Коэффициент')),
                ('b', models.FloatField(verbose_name='Константа')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bonus_enabled', models.BooleanField(default=False)),
                ('is_side_job', models.BooleanField(default=False)),
                ('fixed_bonus', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Бонус за выход')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('has_metro', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата создания записи')),
                ('begin_date', models.DateField(blank=True, null=True, verbose_name='Дата заключения')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('cont_type', models.CharField(blank=True, choices=[('Трудовой', 'Трудовой'), ('ГПХ', 'ГПХ')], default='ГПХ', max_length=100, null=True, verbose_name='Тип договора')),
                ('is_actual', models.BooleanField(default=True, verbose_name='Действующий')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='Номер договора')),
                ('image', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.contract.contract_upload_location, verbose_name='Страница №1')),
                ('image2', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.contract.contract_upload_location, verbose_name='Страница №2')),
                ('image3', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.contract.contract_upload_location, verbose_name='Приложение №1')),
            ],
            options={
                'ordering': ('-id', '-begin_date'),
            },
        ),
        migrations.CreateModel(
            name='Contractor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_of_internal_affairs', models.CharField(max_length=160, verbose_name='Название отделения МВД')),
                ('is_legal_entity', models.BooleanField(verbose_name='Является ли подрядчик юридическим лицом (False, если ИП)')),
                ('full_name', models.CharField(max_length=160, verbose_name='Полное наименование организации/ИП')),
                ('reg_number', models.CharField(max_length=20, verbose_name='Номер регистрации (ОГРН/ОГРНИП)')),
                ('tax_number', models.CharField(max_length=20, verbose_name='Идентификационный номер налогоплательщика (ИНН)')),
                ('reason_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Код причины постановки на учет (КПП)')),
                ('full_address', models.CharField(max_length=160, verbose_name='Адрес места нахождения')),
                ('phone_number', models.CharField(max_length=20, verbose_name='Контактный телефон')),
                ('manager_position', models.CharField(max_length=160, verbose_name='Должность руководителя')),
                ('manager_name', models.CharField(max_length=160, verbose_name='Фамилия и инициалы руководителя')),
                ('work_address', models.CharField(max_length=160, verbose_name='Адрес места трудовой деятельности')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Страна')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cust_name', models.CharField(max_length=100, verbose_name='Название')),
                ('is_actual', models.BooleanField(default=True, verbose_name='Актуальный')),
                ('debts_first_day', models.DateField(default=datetime.date(2000, 1, 1), verbose_name='Первый день, не закрытый актами')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(max_length=100, verbose_name='Название')),
                ('location_adress', models.TextField(blank=True, null=True, verbose_name='Адрес')),
                ('location_how_to_get', models.TextField(blank=True, null=True, verbose_name='Как добраться')),
                ('is_actual', models.BooleanField(default=True, verbose_name='Актуальный')),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.customer')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='CustomerOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата занесения')),
                ('bid_date_time', models.DateField(blank=True, default=None, null=True, verbose_name='Дата и время подачи')),
                ('on_date', models.DateField(blank=True, default=None, null=True, verbose_name='Дата выхода')),
                ('on_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Время выхода')),
                ('bid_turn', models.CharField(blank=True, choices=[('День', 'День'), ('Ночь', 'Ночь')], default='Ночь', max_length=100, null=True, verbose_name='Смена')),
                ('number_of_workers', models.IntegerField(default=0, verbose_name='Количество рабочих')),
                ('cust_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerlocation')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer')),
            ],
            options={
                'ordering': ('-on_date', 'bid_turn'),
            },
        ),
        migrations.CreateModel(
            name='CustomerRepr',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repr_last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('repr_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя')),
                ('repr_patronymic', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('position', models.CharField(blank=True, max_length=100, null=True, verbose_name='Должность')),
                ('tel_number', models.TextField(blank=True, null=True, verbose_name='Номер телефона')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Почта')),
                ('main', models.BooleanField(default=False, verbose_name='Основной')),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer')),
            ],
            options={
                'ordering': ('repr_last_name', 'repr_name', 'repr_patronymic'),
            },
        ),
        migrations.CreateModel(
            name='CustomerService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('account_20_general_taxes', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_general_taxes_service', to='finance.account', verbose_name='20/налоги на обычных работников')),
                ('account_20_general_work', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_general_work_service', to='finance.account', verbose_name='20/расходы на обычных работников')),
                ('account_20_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_root_service', to='finance.account', verbose_name='20 Корень')),
                ('account_20_selfemployed_taxes', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_selfemployed_taxes_service', to='finance.account', verbose_name='20/налоги на самозанятых работников')),
                ('account_20_selfemployed_work', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_selfemployed_work_service', to='finance.account', verbose_name='20/расходы на самозанятых работников')),
                ('account_76', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_76_service', to='finance.account', verbose_name='76 Счет')),
                ('account_90_1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_1_service', to='finance.account', verbose_name='90.1 Счет')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='DailyReconciliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.customerlocation', verbose_name='Объект (филиал)')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interval_begin', models.TimeField(verbose_name='Время исполнения с')),
                ('interval_end', models.TimeField(verbose_name='Время исполнения по')),
                ('code', models.TextField(verbose_name='Индекс')),
                ('mass', models.FloatField(verbose_name='Масса')),
                ('volume', models.FloatField(verbose_name='Объем')),
                ('max_size', models.FloatField(blank=True, null=True, verbose_name='Макс. габарит')),
                ('place_count', models.IntegerField(verbose_name='Кол-во мест')),
                ('shipment_type', models.TextField(verbose_name='Характер груза')),
                ('address', models.TextField(verbose_name='Адрес')),
                ('address_version', models.IntegerField(default=0, verbose_name='Версия адреса')),
                ('has_elevator', models.BooleanField(blank=True, null=True, verbose_name='Есть лифт')),
                ('floor', models.IntegerField(blank=True, null=True, verbose_name='Этаж')),
                ('carrying_distance', models.IntegerField(blank=True, null=True, verbose_name='Пронос')),
                ('workers_required', models.PositiveIntegerField(default=1, verbose_name='Необходимое число рабочих')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('date', models.DateField(verbose_name='Дата')),
                ('status', models.CharField(choices=[('autotarification_attempt', 'Тарифицируется'), ('new', 'Новая'), ('declined', 'Не принята в работу'), ('cancelled', 'Отмена'), ('removed', 'Удалена'), ('failed', 'Срыв заявки'), ('driver_callback', 'Перезвонит сам'), ('no_response', 'Нет ответа'), ('cancelled_with_payment', 'Отмена с оплатой'), ('timepoint_confirmed', 'Поиск исполнителя'), ('partly_confirmed', 'Назначен'), ('partly_arrival_submitted', 'Принята исполнителем'), ('partly_arrived', 'Принята исполнителем'), ('partly_photo_attached', 'На месте'), ('photo_attached', 'Проверка табеля'), ('finished', 'Выполнена')], default='autotarification_attempt', max_length=200, verbose_name='Статус')),
                ('status_description', models.CharField(default='Тарифицируется', max_length=200, verbose_name='Статус (описание)')),
                ('route', models.TextField(blank=True, null=True, verbose_name='Маршрут')),
                ('driver_name', models.TextField(blank=True, null=True, verbose_name='ФИО водителя')),
                ('driver_phones', models.TextField(blank=True, null=True, verbose_name='Телефоны водителя')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('customer_comment', models.TextField(blank=True, null=True, verbose_name='Комментарий клиента')),
                ('confirmed_timepoint', models.TimeField(blank=True, null=True, verbose_name='Согласованное время подачи')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='DriverSms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время отправки')),
                ('text', models.TextField(verbose_name='Текст')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.deliveryrequest', verbose_name='Заявка')),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=30, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Сумма')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('first_day', models.DateField(verbose_name='Первый день периода')),
                ('last_day', models.DateField(verbose_name='Последний день периода')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('expense_debit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='expenses', to='finance.account', verbose_name='дебет расхода')),
            ],
        ),
        migrations.CreateModel(
            name='IndustrialCostType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('is_old_other', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ItemWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.deliveryitem')),
            ],
        ),
        migrations.CreateModel(
            name='ItemWorkerFinish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('itemworker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.itemworker')),
            ],
        ),
        migrations.CreateModel(
            name='ItemWorkerStart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_suspicious', models.BooleanField(default=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('itemworker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.itemworker')),
            ],
        ),
        migrations.CreateModel(
            name='LegalEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=160, verbose_name='Краткое название')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время прибытия')),
                ('provider', models.TextField(verbose_name='Провайдер')),
                ('latitude', models.FloatField(verbose_name='Широта')),
                ('longitude', models.FloatField(verbose_name='Долгота')),
                ('time', models.BigIntegerField(verbose_name='Время GPS')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
        ),
        migrations.CreateModel(
            name='Metro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Станция')),
            ],
        ),
        migrations.CreateModel(
            name='MetroBranch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(verbose_name='Номер ветки')),
                ('name', models.CharField(max_length=100, verbose_name='Имя ветки')),
                ('color', models.CharField(max_length=20, verbose_name='Цвет ветки')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.city', verbose_name='Город')),
            ],
        ),
        migrations.CreateModel(
            name='OperationsPack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
        ),
        migrations.CreateModel(
            name='Pair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.FloatField(verbose_name='Ключ')),
                ('value', models.FloatField(verbose_name='Значение')),
            ],
        ),
        migrations.CreateModel(
            name='Paysheet_v2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('first_day', models.DateField(verbose_name='Первый день периода')),
                ('last_day', models.DateField(verbose_name='Последний день периода')),
                ('is_closed', models.BooleanField(default=False, verbose_name='Закрытая?')),
                ('is_locked', models.BooleanField(default=True, verbose_name='Входящие операции блокируются')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='paysheets', to='the_redhuman_is.customer', verbose_name='Клиент')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='paysheets', to='the_redhuman_is.customerlocation', verbose_name='Объект')),
            ],
        ),
        migrations.CreateModel(
            name='Paysheet_v2Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=30, verbose_name='Фактическая сумма')),
                ('operation', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='paysheet_v2_operation', to='finance.operation', verbose_name='Завершающая операция')),
                ('paysheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paysheet_entries', to='the_redhuman_is.paysheet_v2', verbose_name='Ведомость')),
            ],
        ),
        migrations.CreateModel(
            name='PeriodCloseDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin', models.DateField(verbose_name='Дата начала периода')),
                ('end', models.DateField(verbose_name='Дата конца периода')),
                ('create_timepoint', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('created', models.BooleanField(default=False, verbose_name='Процесс создания периода завершен')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('image', models.ImageField(upload_to=the_redhuman_is.models.photo.content_file_name)),
                ('content_type', models.ForeignKey(db_index=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoLoadSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('contract', 'Фото договора'), ('timesheet', 'Фото табеля'), ('worker', 'Фото рабочего')], max_length=20, verbose_name='Вид изображения')),
                ('status', models.CharField(choices=[('new', 'Новая'), ('work', 'В работе'), ('comment', 'Есть комментарий'), ('complete', 'Закрыта')], max_length=20, verbose_name='Статус')),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('date_edit', models.DateTimeField(auto_now=True)),
                ('handler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='handlers', to=settings.AUTH_USER_MODEL, verbose_name='Обработчик')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='senders', to=settings.AUTH_USER_MODEL, verbose_name='Отправитель')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Должность')),
            ],
        ),
        migrations.CreateModel(
            name='Prepayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('first_day', models.DateField(verbose_name='Первый день периода')),
                ('last_day', models.DateField(verbose_name='Последний день периода')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prepayments', to='the_redhuman_is.customer', verbose_name='Клиент')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prepayments', to='the_redhuman_is.customerlocation', verbose_name='Объект')),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=160, verbose_name='Имя')),
                ('tax_code', models.CharField(blank=True, max_length=160, null=True, verbose_name='Инн')),
                ('account_60', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='account_60_provider', to='finance.account', verbose_name='60 поставщик')),
                ('account_60_fines', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='account_60_provider_fines', to='finance.account', verbose_name='60 штрафы/поставщик')),
            ],
        ),
        migrations.CreateModel(
            name='Reconciliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('first_day', models.DateField(verbose_name='Первый день периода')),
                ('last_day', models.DateField(verbose_name='Последний день периода')),
                ('is_closed', models.BooleanField(default=False, verbose_name='Подписан акт')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reconciliations', to='the_redhuman_is.customerlocation', verbose_name='Объект')),
            ],
        ),
        migrations.CreateModel(
            name='RecruitmentOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('is_actual', models.BooleanField(default=True, verbose_name='Актуальная')),
                ('customer_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to='the_redhuman_is.customerorder')),
            ],
        ),
        migrations.CreateModel(
            name='RegistryNum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RequestWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.deliveryrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Rko',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата')),
                ('is_actual', models.BooleanField(default=True, verbose_name='Непроведенный')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Услуга')),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='TimeSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sheet_date', models.DateField(blank=True, null=True, verbose_name='Дата')),
                ('sheet_turn', models.CharField(choices=[('День', 'День'), ('Ночь', 'Ночь')], default='Новый', max_length=100, verbose_name='Смена')),
                ('turnouts_number', models.IntegerField(blank=True, null=True, verbose_name='Количество рабочих')),
                ('is_executed', models.BooleanField(default=False, verbose_name='Закрыт')),
                ('image', models.ImageField(blank=True, height_field='height_field', null=True, upload_to=timesheet_upload_location, verbose_name='Перед сменой', width_field='width_field')),
                ('image2', models.ImageField(blank=True, height_field='height_field', null=True, upload_to=timesheet_upload_location, verbose_name='Перед сменой', width_field='width_field')),
                ('image3', models.ImageField(blank=True, height_field='height_field', null=True, upload_to=timesheet_upload_location, verbose_name='После смены', width_field='width_field')),
                ('image4', models.ImageField(blank=True, height_field='height_field', null=True, upload_to=timesheet_upload_location, verbose_name='После смены', width_field='width_field')),
                ('height_field', models.IntegerField(default=0)),
                ('width_field', models.IntegerField(default=0)),
                ('cust_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerlocation')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='timesheets', to='the_redhuman_is.customer')),
                ('customer_repr', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerrepr')),
            ],
            options={
                'ordering': ('-sheet_date',),
            },
        ),
        migrations.CreateModel(
            name='UserRegistrationInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('full_name', models.TextField(default='-', verbose_name='ФИО')),
                ('organization_name', models.TextField(default='-', verbose_name='Организация')),
                ('phone', models.TextField(default='-', verbose_name='Телефон')),
                ('email', models.TextField(unique=True, verbose_name='Почта')),
                ('password', models.TextField(verbose_name='Пароль')),
                ('key', models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата внесения')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('patronymic', models.CharField(blank=True, max_length=100, verbose_name='Отчество')),
                ('sex', models.CharField(choices=[('Муж', 'Муж'), ('Жен', 'Жен')], default='Муж', max_length=100, verbose_name='Пол')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('mig_series', models.CharField(blank=True, max_length=7, null=True, verbose_name='МК, серия')),
                ('mig_number', models.CharField(blank=True, max_length=8, null=True, verbose_name='МК, номер')),
                ('m_date_of_issue', models.DateField(blank=True, null=True, verbose_name='МК, дата выдачи')),
                ('m_date_of_exp', models.DateField(blank=True, null=True, verbose_name='МК, дата окончания')),
                ('tel_number', models.CharField(blank=True, max_length=12, null=True, verbose_name='Телефон')),
                ('metro1', models.CharField(blank=True, default='Н/д', max_length=100, null=True, verbose_name='Метро')),
                ('status', models.CharField(blank=True, choices=[('Новый', 'Новый'), ('Неверный номер', 'Неверный номер'), ('Не хочет', 'Не хочет'), ('Хочет, но позже', 'Хочет, но позже'), ('Хочет', 'Хочет'), ('Черный список', 'Черный список')], default='Новый', max_length=100, null=True, verbose_name='Статус')),
                ('speaks_russian', models.CharField(blank=True, choices=[('Н/д', 'Н/д'), ('Плохо', 'Плохо'), ('Средне', 'Средне'), ('Хорошо', 'Хорошо')], default='Н/д', max_length=100, null=True, verbose_name='Знание русского')),
                ('position1', models.CharField(blank=True, choices=[('Грузчик', 'Грузчик'), ('Стажер', 'Стажер'), ('Бригадир', 'Бригадир')], default='Грузчик', max_length=15, null=True, verbose_name='Должность')),
                ('citizenship1', models.CharField(blank=True, choices=[('РФ', 'РФ'), ('Киргизия', 'Киргизия'), ('Казахстан', 'Казахстан'), ('Узбекистан', 'Узбекистан'), ('Украина', 'Украина'), ('Белоруссия', 'Белоруссия'), ('Таджикистан', 'Таджикистан'), ('Республика Армения', 'Республика Армения'), ('Республика Молдова', 'Республика Молдова')], default='Киргизия', max_length=100, null=True, verbose_name='Гражданство')),
                ('place_of_birth1', models.CharField(blank=True, choices=[('Российская Федерация', 'Российская Федерация'), ('Киргизия', 'Киргизия'), ('Казахстан', 'Казахстан'), ('Таджикистан', 'Таджикистан'), ('Узбекистан', 'Узбекистан'), ('Украина', 'Украина'), ('Белоруссия', 'Белоруссия'), ('Республика Армения', 'Республика Армения'), ('Республика Молдова', 'Республика Молдова')], default='Киргизия', max_length=100, null=True, verbose_name='Место рождения')),
                ('contract_type', models.CharField(blank=True, choices=[('Трудовой', 'Трудовой'), ('ГПХ', 'ГПХ')], default='ГПХ', max_length=100, null=True, verbose_name='Договор')),
                ('citizenship', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citizens', to='the_redhuman_is.country', verbose_name='Гражданство')),
                ('metro', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.metro', verbose_name='Метро')),
                ('place_of_birth', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='workers_born', to='the_redhuman_is.country', verbose_name='Место рождения')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.position', verbose_name='Должность')),
            ],
            options={
                'ordering': ('last_name', 'name', 'patronymic'),
            },
        ),
        migrations.CreateModel(
            name='WorkerLabelType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('comment_required', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='WorkerReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('url', models.URLField(unique=True, verbose_name='Адрес чека')),
                ('date', models.DateField(verbose_name='Дата чека')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='ZoneGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('code', models.CharField(max_length=64, unique=True, verbose_name='Код')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.zonegroup')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerTurnout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worker_code_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Кодовое имя работника')),
                ('hours_worked', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Отработано часов')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('is_payed', models.BooleanField(default=False, verbose_name='Оплачен')),
                ('performance', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True, verbose_name='Выработка')),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='worker_turnouts', to='the_redhuman_is.contract', verbose_name='Договор')),
                ('timesheet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='worker_turnouts', to='the_redhuman_is.timesheet', verbose_name='Табель')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='worker_turnouts', to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='WorkerTelegramUserId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_user_id', models.BigIntegerField(verbose_name='id пользователя в телеграме')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('tag', models.CharField(max_length=40)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerSNILS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=14, verbose_name='СНИЛС')),
                ('date_of_issue', models.DateField(verbose_name='Дата выдачи')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='snils', to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkersForOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.recruitmentorder')),
                ('worker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerSelfEmploymentData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deletion_ts', models.DateTimeField(blank=True, null=True)),
                ('tax_number', models.CharField(max_length=20, verbose_name='ИНН')),
                ('bank_account', models.CharField(max_length=25, verbose_name='Расчетный счет')),
                ('bank_name', models.CharField(max_length=200, verbose_name='Наименование банка')),
                ('bank_identification_code', models.CharField(max_length=9, verbose_name='БИК')),
                ('correspondent_account', models.CharField(max_length=20, verbose_name='Корреспондентский счет')),
                ('cardholder_name', models.CharField(max_length=255, verbose_name='ФИО держателя карты')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selfemployment_data', to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerRocketchatVisitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rocketchat_visitor_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('rocketchat_visitor_room_id', models.TextField(unique=True)),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerRejection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('requestworker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.requestworker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('r_date_of_issue', models.DateField(verbose_name='Дата постановки на учет')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('street', models.CharField(max_length=100, verbose_name='Улица')),
                ('house_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Дом')),
                ('building_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Строение')),
                ('appt_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Квартира')),
                ('is_actual', models.BooleanField(default=True)),
                ('workers_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerReceiptRegistryNum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registry_num', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.registrynum', verbose_name='Номер реестра')),
                ('worker_receipt', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerreceipt', verbose_name='Чек')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerReceiptPaysheetEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paysheet_entry', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.paysheet_v2entry', verbose_name='Запись в ведомости')),
                ('worker_receipt', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerreceipt', verbose_name='Чек')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_call', models.DateTimeField(null=True)),
                ('is_benevolent', models.BooleanField(default=True)),
                ('reliability', models.DecimalField(decimal_places=2, default=Decimal('5.00'), max_digits=3)),
                ('availability', models.SmallIntegerField(choices=[(2, 'На связи'), (-1, 'Нет связи'), (1, 'Не отвечает'), (0, 'Не звонили')], default=0)),
                ('readiness', models.SmallIntegerField(choices=[(2, 'Готов завтра'), (1, 'Готов в другой день'), (-1, 'Не готов'), (0, 'Неизвестно')], default=0)),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerPrepayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=30, verbose_name='Сумма')),
                ('operation', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
                ('prepayment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='workers', to='the_redhuman_is.prepayment', verbose_name='Авансовая ведомость')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerPatent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.CharField(blank=True, max_length=20, null=True, verbose_name='Серия')),
                ('number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер')),
                ('date_of_issue', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='Дата окончания срока действия')),
                ('issued_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Кем выдан')),
                ('profession', models.CharField(blank=True, max_length=100, null=True, verbose_name='Профессия')),
                ('profession_id', models.IntegerField(blank=True, null=True, verbose_name='Код профессии')),
                ('is_actual', models.BooleanField(default=True)),
                ('workers_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerPassport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passport_type', models.CharField(blank=True, choices=[('Внутренний', 'Внутренний'), ('Заграничный', 'Заграничный'), ('PФ', 'РФ')], default='Новый', max_length=15, null=True, verbose_name='Тип паспорта')),
                ('passport_series', models.CharField(blank=True, max_length=5, null=True, verbose_name='Серия паспорта')),
                ('another_passport_number', models.CharField(blank=True, max_length=11, null=True, verbose_name='Номер паспорта')),
                ('date_of_issue', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('date_of_exp', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('issued_by', models.CharField(blank=True, max_length=200, null=True, verbose_name='Кем выдан')),
                ('is_actual', models.BooleanField(default=True)),
                ('workers_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerOperatingAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='worker_account', to='finance.account', verbose_name='Расчетный счет')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='worker_account', to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerMigrationCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='migration_card', to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerMedicalCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Номер медкнижки')),
                ('card_date_of_issue', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('card_date_of_exp', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('image', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.worker.medcard_upload_location)),
                ('image2', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.worker.medcard_upload_location)),
                ('image3', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.worker.medcard_upload_location)),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerlabeltype')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerDeposit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='finance.account', verbose_name='Залоговый счет')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='deposit', to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('requestworker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.requestworker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerComments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='WorkerBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='WeekendRest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.zonegroup')),
            ],
        ),
        migrations.CreateModel(
            name='UserPhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.TextField(verbose_name='Телефон')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UniqueRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.BigIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutTaxOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
                ('turnout', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerservice')),
                ('turnout', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='TurnoutPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время фото')),
                ('photo_rejected', models.BooleanField(default=False, verbose_name='Фото отклонено')),
                ('rejection_comment', models.TextField(default='', verbose_name='Комментарий')),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.arrivallocation', verbose_name='Точка прибытия')),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.photo', verbose_name='Фото')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Количество')),
                ('errors', models.IntegerField(verbose_name='Ошибки')),
                ('box_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.boxtype', verbose_name='Тип')),
                ('turnout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='output', to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutOperationToPay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
                ('turnout', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutOperationIsPayed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
                ('turnout', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutDiscrepancyCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время проверки')),
                ('is_ok', models.BooleanField(db_index=True, default=None, null=True)),
                ('comment', models.TextField(default='', verbose_name='Комментарий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('turnout', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.arrivallocation', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
                ('turnout', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deductions', to='the_redhuman_is.workerturnout')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutCustomerOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
                ('turnout', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
                ('turnout', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout')),
            ],
        ),
        migrations.CreateModel(
            name='TurnoutAdjustingOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
                ('turnout', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='TimesheetSoftNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timesheet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='soft_notification', to='the_redhuman_is.timesheet')),
            ],
        ),
        migrations.CreateModel(
            name='TimesheetProcessingTimepoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timepoint', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Момент закрытия')),
                ('timesheet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='processing_timepoint', to='the_redhuman_is.timesheet', verbose_name='Табель')),
            ],
        ),
        migrations.CreateModel(
            name='TimesheetCreationTimepoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timepoint', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Момент создания')),
                ('timesheet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='creation_timepoint', to='the_redhuman_is.timesheet', verbose_name='Табель')),
            ],
        ),
        migrations.AddField(
            model_name='timesheet',
            name='foreman',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker'),
        ),
        migrations.CreateModel(
            name='TestRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField(verbose_name='День создания')),
                ('registry_num', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.registrynum', verbose_name='Номер реестра')),
            ],
        ),
        migrations.CreateModel(
            name='TestDispatcherPassword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.TextField(verbose_name='Пароль')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Диспетчер')),
            ],
        ),
        migrations.CreateModel(
            name='TestDispatcherComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Диспетчер')),
            ],
        ),
        migrations.CreateModel(
            name='SmsPhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.TextField(verbose_name='Телефон')),
                ('sms', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.driversms', verbose_name='СМС')),
            ],
        ),
        migrations.CreateModel(
            name='SingleTurnoutCalculator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter_1', models.CharField(max_length=100, verbose_name='Параметр расчета 1 (условие)')),
                ('parameter_2', models.CharField(max_length=100, verbose_name='Параметр расчета 2 (формула)')),
                ('intervals', models.ManyToManyField(to='the_redhuman_is.CalculatorInterval')),
            ],
        ),
        migrations.CreateModel(
            name='SheetPeriodClose',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('close_document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sheet_close_operations', to='the_redhuman_is.periodclosedocument')),
                ('close_operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sheet_close_operation', to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCalculator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_day', models.DateField(verbose_name='Первый день')),
                ('last_day', models.DateField(blank=True, null=True, verbose_name='Последний день')),
                ('calculator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.amountcalculator', verbose_name='Группа калькуляторов')),
                ('customer_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.customerservice', verbose_name='Услуга')),
            ],
        ),
        migrations.CreateModel(
            name='SalaryPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='RkoOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
                ('rko', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.rko', verbose_name='Расходный кассовый ордер')),
            ],
        ),
        migrations.AddField(
            model_name='rko',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker'),
        ),
        migrations.CreateModel(
            name='ResetPasswordRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RequestWorkerTurnout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('requestworker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.requestworker')),
                ('workerturnout', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout')),
            ],
        ),
        migrations.AddField(
            model_name='requestworker',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker'),
        ),
        migrations.CreateModel(
            name='RequestsFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время импорта')),
                ('status', models.CharField(choices=[('processing', 'Формируется'), ('finished_with_errors', 'Завершено с ошибками'), ('finished', 'Завершено'), ('error', 'Не удалось сформировать')], default='processing', max_length=50, verbose_name='Статус')),
                ('status_description', models.TextField(default='Формируется', verbose_name='Статус (описание)')),
                ('data_file', models.FileField(upload_to=the_redhuman_is.models.delivery._delivery_requests_upload_location)),
                ('processed_data_file', models.FileField(null=True, upload_to=the_redhuman_is.models.delivery._delivery_requests_processed_upload_location)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='RequestsAutoMergeEnabled',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.customerlocation', verbose_name='Объект (филиал)')),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationPaymentOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reconciliation_payment', to='finance.operation')),
                ('reconciliation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_operation', to='the_redhuman_is.reconciliation', verbose_name='Сверка')),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=40, verbose_name='Номер счета')),
                ('date', models.DateField(verbose_name='Дата счета')),
                ('reconciliation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='invoice', to='the_redhuman_is.reconciliation')),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('reconciliation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='confirmation', to='the_redhuman_is.reconciliation', verbose_name='Сверка')),
            ],
        ),
        migrations.CreateModel(
            name='ProviderFine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.provider', verbose_name='Поставщик')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateDeliveryRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.deliveryrequest', verbose_name='Заявка')),
            ],
        ),
        migrations.CreateModel(
            name='PreferredContractor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contractor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.contractor')),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.customerlocation')),
            ],
        ),
        migrations.CreateModel(
            name='PositionCalculator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculator_object_id', models.PositiveIntegerField()),
                ('first_day', models.DateField(verbose_name='Первый день')),
                ('last_day', models.DateField(blank=True, null=True, verbose_name='Последний день')),
                ('calculator_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='position_calculator', to='contenttypes.contenttype')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.position', verbose_name='Должность')),
            ],
        ),
        migrations.CreateModel(
            name='PlannedOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('timepoint', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата и время')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=30, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Сумма')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('credit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='planned_credit_operations', to='finance.account', verbose_name='Кредит')),
                ('debet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='planned_debit_operations', to='finance.account', verbose_name='Дебет')),
            ],
        ),
        migrations.CreateModel(
            name='PlannedContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('date', models.DateField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('worker', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoSessionRejectedPhotos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.photoloadsession')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoSessionComments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Отправитель')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='comments', to='the_redhuman_is.photoloadsession')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='PhotoSessionCitizenship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citizenship', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.country', verbose_name='Гражданство')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.photoloadsession')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoRejectionComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('rejection_comment', models.TextField(default='', verbose_name='Комментарий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('photo', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.photo', verbose_name='Фото')),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('data_file', models.FileField(upload_to=the_redhuman_is.models.vkusvill._performance_file_upload_location)),
                ('import_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Время импорта данных из файла')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
        ),
        migrations.CreateModel(
            name='PaysheetRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paysheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.paysheet_v2', verbose_name='Ведомость')),
                ('registry_num', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.registrynum', verbose_name='Номер реестра')),
            ],
        ),
        migrations.CreateModel(
            name='PaysheetParams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('kind', models.CharField(choices=[('prepayment', 'Авансовая'), ('paysheet', 'Зарплатная')], max_length=32, verbose_name='Тип')),
                ('first_day', models.DateField(verbose_name='Первый день периода')),
                ('last_day', models.DateField(verbose_name='Последний день периода')),
                ('pay_day', models.DateField(verbose_name='Планируемая дата выплаты')),
                ('accountable_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.accountableperson', verbose_name='Подотчетное лицо')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerlocation', verbose_name='Объект')),
            ],
        ),
        migrations.CreateModel(
            name='Paysheet_v2EntryOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paysheet_entry_operations', to='the_redhuman_is.paysheet_v2entry', verbose_name='Запись в ведомости')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='paysheet_entry_operation', to='finance.operation', verbose_name='Операция')),
            ],
        ),
        migrations.AddField(
            model_name='paysheet_v2entry',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='paysheet_v2_entries', to='the_redhuman_is.worker', verbose_name='Работник'),
        ),
        migrations.CreateModel(
            name='PayoutRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('paysheet_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.paysheet_v2entry', verbose_name='Запись в ведомости')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='OperatorZoneGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Оператор')),
                ('zone_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.zonegroup', verbose_name='Группа зон доставки')),
            ],
        ),
        migrations.CreateModel(
            name='OperationsPackItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pack_items', to='finance.operation', verbose_name='Операция')),
                ('pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='the_redhuman_is.operationspack', verbose_name='Группа операций')),
            ],
        ),
        migrations.CreateModel(
            name='OnlineStatusMark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время')),
                ('online', models.BooleanField(verbose_name='На линии')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='online_marks_set', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='OnlineSignup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.localdate, verbose_name='Дата')),
                ('worker', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='OneOffCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('code', models.TextField(verbose_name='Код')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NoticeOfTermination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата расторжения')),
                ('replication_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата прикрепления справки')),
                ('image', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.contract.notice_of_termination_upload_location, verbose_name='Фото справки')),
                ('contract', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.contract', verbose_name='Договор')),
            ],
        ),
        migrations.CreateModel(
            name='NoticeOfContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата создания')),
                ('replication_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата прикрепления справки')),
                ('image', models.ImageField(blank=True, null=True, upload_to=the_redhuman_is.models.contract.notice_of_contract_upload_location, verbose_name='Фото справки')),
                ('contract', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.contract', verbose_name='Договор')),
            ],
        ),
        migrations.CreateModel(
            name='NoticeOfArrival',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.contract')),
            ],
        ),
        migrations.CreateModel(
            name='NormalizedAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время прибытия')),
                ('version', models.IntegerField(verbose_name='Версия')),
                ('latitude', models.FloatField(verbose_name='Широта')),
                ('longitude', models.FloatField(verbose_name='Долгота')),
                ('region', models.TextField(blank=True, null=True, verbose_name='ISO код региона')),
                ('nearest_metro_line', models.TextField(blank=True, null=True, verbose_name='Ближайшая линия метро')),
                ('nearest_metro_station', models.TextField(blank=True, null=True, verbose_name='Ближайшая станция метро')),
                ('raw_data', models.TextField(verbose_name='Сырые данные')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.deliveryitem', verbose_name='Адрес')),
            ],
        ),
        migrations.CreateModel(
            name='MobileAppWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='MobileAppStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время')),
                ('app_id', models.TextField(blank=True, null=True, verbose_name='Идентификатор установки')),
                ('version_code', models.IntegerField(verbose_name='Код версии')),
                ('device_manufacturer', models.TextField(verbose_name='Производитель смартфона')),
                ('device_model', models.TextField(verbose_name='Модель смартфона')),
                ('location', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.location')),
                ('user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='MetroStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.metrobranch', verbose_name='Ветка')),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceManagerPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.position')),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='LocationZoneGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerlocation', verbose_name='Объект (филиал)')),
                ('zone_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.zonegroup', verbose_name='Группа зон доставки')),
            ],
        ),
        migrations.CreateModel(
            name='LocationAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerlocation')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LegalEntitySimpleTaxSystemAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_26_68_12', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_68_12_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='26/68.12/Юрлицо (УСН)')),
                ('account_26_68_14', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_68_14_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='26/68.14/Юрлицо (ПСН)')),
                ('account_26_69_06_3', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_69_06_3_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='26/69.06.3/Юрлицо (ФФОМС)')),
                ('account_26_69_06_5_1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_69_06_5_1_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='26/69.06.5/1/Юрлицо (ОПС фиксированные взносы)')),
                ('account_26_69_06_5_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_69_06_5_2_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='26/69.06.5/2/Юрлицо (ОПС 1%)')),
                ('account_68_12', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_68_12_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='68/12/Юрлицо (УСН)')),
                ('account_68_14', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_68_14_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='68/14/Юрлицо (ПСН)')),
                ('account_69_06_3', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_69_06_3_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='69/06/3/Юрлицо (ФФОМС)')),
                ('account_69_06_5_1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_69_06_5_1_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='69/06/5/1/Юрлицо (ОПС фиксированные взносы)')),
                ('account_69_06_5_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_69_06_5_2_legal_entity_simple_tax_system_accounts', to='finance.account', verbose_name='69/06/5/2/Юрлицо (ОПС 1%)')),
                ('legal_entity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='legal_entity_simple_tax_system_accounts', to='the_redhuman_is.legalentity', verbose_name='Юрлицо')),
            ],
        ),
        migrations.CreateModel(
            name='LegalEntityGeneralTaxSystemAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_19', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_19_legal_entity_general_tax_system_accounts', to='finance.account', verbose_name='19/Юрлицо (НДС к вычету)')),
                ('account_26_68_04_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_68_04_2_legal_entity_general_tax_system_accounts', to='finance.account', verbose_name='26/04.02/Юрлицо (Налог на прибыль)')),
                ('account_68_02', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_68_02_legal_entity_general_tax_system_accounts', to='finance.account', verbose_name='68/02/Юрлицо (НДС)')),
                ('account_68_04_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_68_04_2_legal_entity_general_tax_system_accounts', to='finance.account', verbose_name='68/04.2/Юрлицо (Налог на прибыль)')),
                ('legal_entity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='legal_entity_general_tax_system_accounts', to='the_redhuman_is.legalentity', verbose_name='Юрлицо')),
            ],
        ),
        migrations.CreateModel(
            name='LegalEntityCommonAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_26_68_01', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_68_01_legal_entity_common_accounts', to='finance.account', verbose_name='26/68.01/Юрлицо (НДФЛ)')),
                ('account_26_69_1_1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_69_1_1_legal_entity_common_accounts', to='finance.account', verbose_name='26/69 ФСС, ВН и М/Юрлицо (ФСС)')),
                ('account_26_69_1_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_69_1_2_legal_entity_common_accounts', to='finance.account', verbose_name='26/69 ФСС, НС и ПЗ/Юрлицо (ФСС)')),
                ('account_26_69_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_69_2_legal_entity_common_accounts', to='finance.account', verbose_name='26/69/2/Юрлицо (ОПС)')),
                ('account_26_69_3', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_69_3_legal_entity_common_accounts', to='finance.account', verbose_name='26/69/3/Юрлицо (ОМС)')),
                ('account_26_bank_comission', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_bank_comission_legal_entity_common_accounts', to='finance.account', verbose_name='Комиссия, Банки')),
                ('account_26_partner_comission', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_26_partner_comission_legal_entity_common_accounts', to='finance.account', verbose_name='Комиссия, Партнеры')),
                ('account_51_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_51_legal_entity_common_accounts', to='finance.account', verbose_name='51/Юрлицо')),
                ('account_68_01', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_68_01_legal_entity_common_accounts', to='finance.account', verbose_name='68/01/Юрлицо (НДФЛ)')),
                ('account_69_1_1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_69_1_1_legal_entity_common_accounts', to='finance.account', verbose_name='69/ФСС, ВН и М/Юрлицо (ФСС)')),
                ('account_69_1_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_69_1_2_legal_entity_common_accounts', to='finance.account', verbose_name='69/ФСС, НС и ПЗ/Юрлицо (ФСС)')),
                ('account_69_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_69_2_legal_entity_common_accounts', to='finance.account', verbose_name='69/2/Юрлицо (ОПС)')),
                ('account_69_3', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_69_3_legal_entity_common_accounts', to='finance.account', verbose_name='69/3/Юрлицо (ОМС)')),
                ('account_90_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_2_legal_entity_common_accounts', to='finance.account', verbose_name='90/2/Общехоз. расходы/Юрлицо')),
                ('account_90_9', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_9_legal_entity_common_accounts', to='finance.account', verbose_name='90/9/Общехоз. расходы/Юрлицо')),
                ('legal_entity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='legal_entity_common_accounts', to='the_redhuman_is.legalentity', verbose_name='Юрлицо')),
            ],
        ),
        migrations.CreateModel(
            name='LastLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.location')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='KNSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время импорта')),
                ('data_file', models.FileField(upload_to=the_redhuman_is.models.kuehne_nagel._kn_sheet_upload_location)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
        ),
        migrations.CreateModel(
            name='K2KSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время импорта')),
                ('data_file', models.FileField(upload_to=the_redhuman_is.models.itella._k2k_sheet_upload_location)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
        ),
        migrations.CreateModel(
            name='K2KAlias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('alias', models.CharField(max_length=256, verbose_name='Написание Ителлы')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Рабочий')),
            ],
        ),
        migrations.CreateModel(
            name='ItemWorkerStartConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('itemworkerstart', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.itemworkerstart')),
            ],
        ),
        migrations.AddField(
            model_name='itemworkerstart',
            name='location',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.location'),
        ),
        migrations.CreateModel(
            name='ItemWorkerRejection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('reason', models.CharField(choices=[('defect', 'Брак'), ('failure', 'Срыв'), ('cancelled', 'Отмена')], max_length=9)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('itemworker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.itemworker')),
            ],
        ),
        migrations.CreateModel(
            name='ItemWorkerFinishConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('itemworkerfinish', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.itemworkerfinish')),
            ],
        ),
        migrations.AddField(
            model_name='itemworkerfinish',
            name='location',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.location'),
        ),
        migrations.AddField(
            model_name='itemworkerfinish',
            name='photo',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.photo', verbose_name='Фото'),
        ),
        migrations.CreateModel(
            name='ItemWorkerDiscrepancyCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время проверки')),
                ('is_ok', models.BooleanField(db_index=True, default=None, null=True)),
                ('comment', models.TextField(default='', verbose_name='Комментарий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('itemworkerstart', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.itemworkerstart', verbose_name='Прибытие')),
            ],
        ),
        migrations.AddField(
            model_name='itemworker',
            name='requestworker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.requestworker'),
        ),
        migrations.CreateModel(
            name='ImportVisitTimestamp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='ImportProcessedTimestamp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='HostelBonusOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
                ('turnout', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='HostelBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('amount', models.PositiveIntegerField()),
                ('first_day', models.DateField(verbose_name='Первый день')),
                ('last_day', models.DateField(blank=True, null=True, verbose_name='Последний день')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Рабочий')),
            ],
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_name', models.CharField(max_length=250, verbose_name='Домашняя страница')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='GoogleMapsAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время прибытия')),
                ('version', models.IntegerField(verbose_name='Версия')),
                ('raw_data', models.TextField(verbose_name='Сырые данные')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.deliveryitem', verbose_name='Адрес')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseRejection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('expense', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.expense', verbose_name='Расход')),
            ],
        ),
        migrations.CreateModel(
            name='ExpensePaymentOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.expense', verbose_name='Расход')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='expense_payment', to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.expense', verbose_name='Расход')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='expense', to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseDeductionOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.expense', verbose_name='Расход')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='expense_deduction', to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('expense', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.expense', verbose_name='Расход')),
            ],
        ),
        migrations.AddField(
            model_name='expense',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.provider', verbose_name='Поставщик'),
        ),
        migrations.CreateModel(
            name='ErrorsFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('data_file', models.FileField(upload_to=the_redhuman_is.models.vkusvill._errors_file_upload_location)),
                ('first_day', models.DateField(verbose_name='Первый день периода')),
                ('last_day', models.DateField(verbose_name='Последний день периода')),
                ('import_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Время импорта данных из файла')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentWithAccountablePerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('accountable_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.accountableperson', verbose_name='Подотчетное лицо')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='DevelopmentManagerPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.position')),
            ],
        ),
        migrations.CreateModel(
            name='DevelopmentManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=64, unique=True, verbose_name='Код зоны')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.zonegroup', verbose_name='Группа')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryWorkerFCMToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время обновления')),
                ('app_id', models.TextField(verbose_name='Идентификатор установки')),
                ('token', models.TextField(verbose_name='Токен')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_for_united_request', models.BooleanField(default=False, verbose_name='Тариф только для "объединенных" заявок')),
                ('min_mass', models.FloatField(default=0, verbose_name='Минимальная масса для тарифа')),
                ('zone', models.CharField(choices=[('msk', 'Москва'), ('msk_15', 'МО до 15'), ('msk_30', 'МО до 30'), ('msk_45', 'МО до 45'), ('msk_60', 'МО до 60'), ('msk_60+', 'МО от 60'), ('spb', 'Санкт-Петербург'), ('spb_15', 'Санкт-Петербург до 15'), ('spb_30', 'Санкт-Петербург до 30'), ('spb_45', 'Санкт-Петербург до 45'), ('spb_60', 'Санкт-Петербург до 60'), ('spb_60+', 'Санкт-Петербург от 60'), ('orel', 'Орёл'), ('orel_15', 'Орёл до 15'), ('orel_30', 'Орёл до 30'), ('orel_45', 'Орёл до 45'), ('orel_60', 'Орёл до 60'), ('orel_60+', 'Орёл от 60'), ('sochi', 'Сочи'), ('sochi_15', 'Сочи до 15'), ('sochi_30', 'Сочи до 30'), ('sochi_45', 'Сочи до 45'), ('sochi_60', 'Сочи до 60'), ('sochi_60+', 'Сочи от 60'), ('adler', 'Адлер'), ('adler_15', 'Адлер до 15'), ('adler_30', 'Адлер до 30'), ('adler_45', 'Адлер до 45'), ('adler_60', 'Адлер до 60'), ('adler_60+', 'Адлер от 60'), ('ulyanovsk', 'Ульяновск'), ('ulyanovsk_15', 'Ульяновск до 15'), ('ulyanovsk_30', 'Ульяновск до 30'), ('ulyanovsk_45', 'Ульяновск до 45'), ('ulyanovsk_60', 'Ульяновск до 60'), ('ulyanovsk_60+', 'Ульяновск от 60'), ('samara', 'Самара'), ('samara_15', 'Самара до 15'), ('samara_30', 'Самара до 30'), ('samara_45', 'Самара до 45'), ('samara_60', 'Самара до 60'), ('samara_60+', 'Самара от 60'), ('vyborg', 'Выборг'), ('vyborg_15', 'Выборг до 15'), ('vyborg_30', 'Выборг до 30'), ('vyborg_45', 'Выборг до 45'), ('vyborg_60', 'Выборг до 60'), ('vyborg_60+', 'Выборг от 60'), ('lipetsk', 'Липецк'), ('lipetsk_15', 'Липецк до 15'), ('lipetsk_30', 'Липецк до 30'), ('lipetsk_45', 'Липецк до 45'), ('lipetsk_60', 'Липецк до 60'), ('lipetsk_60+', 'Липецк от 60'), ('kaliningrad', 'Калининград'), ('kaliningrad_15', 'Калининград до 15'), ('kaliningrad_30', 'Калининград до 30'), ('kaliningrad_45', 'Калининград до 45'), ('kaliningrad_60', 'Калининград до 60'), ('kaliningrad_60+', 'Калининград от 60'), ('nn', 'Нижний Новгород'), ('nn_15', 'Нижний Новгород до 15'), ('nn_30', 'Нижний Новгород до 30'), ('nn_45', 'Нижний Новгород до 45'), ('nn_60', 'Нижний Новгород до 60'), ('nn_60+', 'Нижний Новгород от 60'), ('tyumen', 'Тюмень'), ('tyumen_15', 'Тюмень до 15'), ('tyumen_30', 'Тюмень до 30'), ('tyumen_45', 'Тюмень до 45'), ('tyumen_60', 'Тюмень до 60'), ('tyumen_60+', 'Тюмень от 60'), ('perm', 'Пермь'), ('perm_15', 'Пермь до 15'), ('perm_30', 'Пермь до 30'), ('perm_45', 'Пермь до 45'), ('perm_60', 'Пермь до 60'), ('perm_60+', 'Пермь от 60'), ('bataisk', 'Батайск'), ('bataisk_15', 'Батайск до 15'), ('bataisk_30', 'Батайск до 30'), ('bataisk_45', 'Батайск до 45'), ('bataisk_60', 'Батайск до 60'), ('bataisk_60+', 'Батайск от 60'), ('rostov_on_don', 'Ростов-на-Дону'), ('rostov_on_don_15', 'Ростов-на-Дону до 15'), ('rostov_on_don_30', 'Ростов-на-Дону до 30'), ('rostov_on_don_45', 'Ростов-на-Дону до 45'), ('rostov_on_don_60', 'Ростов-на-Дону до 60'), ('rostov_on_don_60+', 'Ростов-на-Дону от 60'), ('ryazan', 'Рязань'), ('ryazan_15', 'Рязань до 15'), ('ryazan_30', 'Рязань до 30'), ('ryazan_45', 'Рязань до 45'), ('ryazan_60', 'Рязань до 60'), ('ryazan_60+', 'Рязань от 60'), ('voronezh', 'Воронеж'), ('voronezh_15', 'Воронеж до 15'), ('voronezh_30', 'Воронеж до 30'), ('voronezh_45', 'Воронеж до 45'), ('voronezh_60', 'Воронеж до 60'), ('voronezh_60+', 'Воронеж от 60'), ('belgorod', 'Белгород'), ('belgorod_15', 'Белгород до 15'), ('belgorod_30', 'Белгород до 30'), ('belgorod_45', 'Белгород до 45'), ('belgorod_60', 'Белгород до 60'), ('belgorod_60+', 'Белгород от 60'), ('petrozavodsk', 'Петрозаводск'), ('petrozavodsk_15', 'Петрозаводск до 15'), ('petrozavodsk_30', 'Петрозаводск до 30'), ('petrozavodsk_45', 'Петрозаводск до 45'), ('petrozavodsk_60', 'Петрозаводск до 60'), ('petrozavodsk_60+', 'Петрозаводск от 60'), ('kursk', 'Курск'), ('kursk_15', 'Курск до 15'), ('kursk_30', 'Курск до 30'), ('kursk_45', 'Курск до 45'), ('kursk_60', 'Курск до 60'), ('kursk_60+', 'Курск от 60'), ('dmitrov', 'Дмитров'), ('dmitrov_15', 'Дмитров до 15'), ('dmitrov_30', 'Дмитров до 30'), ('dmitrov_45', 'Дмитров до 45'), ('dmitrov_60', 'Дмитров до 60'), ('dmitrov_60+', 'Дмитров от 60'), ('novosibirsk', 'Новосибирск'), ('novosibirsk_15', 'Новосибирск до 15'), ('novosibirsk_30', 'Новосибирск до 30'), ('novosibirsk_45', 'Новосибирск до 45'), ('novosibirsk_60', 'Новосибирск до 60'), ('novosibirsk_60+', 'Новосибирск от 60'), ('krasnodar', 'Краснодар'), ('krasnodar_15', 'Краснодар до 15'), ('krasnodar_30', 'Краснодар до 30'), ('krasnodar_45', 'Краснодар до 45'), ('krasnodar_60', 'Краснодар до 60'), ('krasnodar_60+', 'Краснодар от 60'), ('serpukhov', 'Серпухов'), ('serpukhov_15', 'Серпухов до 15'), ('serpukhov_30', 'Серпухов до 30'), ('serpukhov_45', 'Серпухов до 45'), ('serpukhov_60', 'Серпухов до 60'), ('serpukhov_60+', 'Серпухов от 60'), ('omsk', 'Омск'), ('omsk_15', 'Омск до 15'), ('omsk_30', 'Омск до 30'), ('omsk_45', 'Омск до 45'), ('omsk_60', 'Омск до 60'), ('omsk_60+', 'Омск от 60'), ('ufa', 'Уфа'), ('ufa_15', 'Уфа до 15'), ('ufa_30', 'Уфа до 30'), ('ufa_45', 'Уфа до 45'), ('ufa_60', 'Уфа до 60'), ('ufa_60+', 'Уфа от 60'), ('arkhangelsk', 'Архангельск'), ('arkhangelsk_15', 'Архангельск до 15'), ('arkhangelsk_30', 'Архангельск до 30'), ('arkhangelsk_45', 'Архангельск до 45'), ('arkhangelsk_60', 'Архангельск до 60'), ('arkhangelsk_60+', 'Архангельск от 60'), ('severodvinsk', 'Северодвинск'), ('severodvinsk_15', 'Северодвинск до 15'), ('severodvinsk_30', 'Северодвинск до 30'), ('severodvinsk_45', 'Северодвинск до 45'), ('severodvinsk_60', 'Северодвинск до 60'), ('severodvinsk_60+', 'Северодвинск от 60')], default='msk', max_length=32, verbose_name='Зона')),
                ('customer_service_name', models.CharField(max_length=50, verbose_name='Название для клиента')),
                ('operator_service_name', models.CharField(max_length=50, verbose_name='Название для оператора')),
                ('travel_hours', models.IntegerField(verbose_name='Часов за дорогу')),
                ('hours', models.IntegerField(verbose_name='Часов всего')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerservice', verbose_name='Услуга')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryRequestTimepointChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время изменения')),
                ('confirmed_timepoint', models.TimeField(blank=True, null=True, verbose_name='Согласованное время подачи')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.deliveryrequest', verbose_name='Заявка')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryRequestStatusChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время изменения')),
                ('status', models.CharField(choices=[('autotarification_attempt', 'Тарифицируется'), ('new', 'Новая'), ('declined', 'Не принята в работу'), ('cancelled', 'Отмена'), ('removed', 'Удалена'), ('failed', 'Срыв заявки'), ('driver_callback', 'Перезвонит сам'), ('no_response', 'Нет ответа'), ('cancelled_with_payment', 'Отмена с оплатой'), ('timepoint_confirmed', 'Поиск исполнителя'), ('partly_confirmed', 'Назначен'), ('partly_arrival_submitted', 'Принята исполнителем'), ('partly_arrived', 'Принята исполнителем'), ('partly_photo_attached', 'На месте'), ('photo_attached', 'Проверка табеля'), ('finished', 'Выполнена')], max_length=200, verbose_name='Статус')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.deliveryrequest', verbose_name='Заявка')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryRequestOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время создания')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Оператор')),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.deliveryrequest', verbose_name='Заявка')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryRequestConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время подтверждения')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.deliveryrequest', verbose_name='Заявка')),
            ],
        ),
        migrations.AddField(
            model_name='deliveryrequest',
            name='delivery_service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.deliveryservice', verbose_name='Услуга'),
        ),
        migrations.AddField(
            model_name='deliveryrequest',
            name='location',
            field=models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customerlocation', verbose_name='Объект (филиал)'),
        ),
        migrations.AddField(
            model_name='deliveryitem',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.deliveryrequest', verbose_name='Заявка'),
        ),
        migrations.CreateModel(
            name='DeliveryInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время импорта')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=30, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Сумма')),
                ('invoice_file', models.FileField(upload_to=the_redhuman_is.models.delivery._delivery_invoices_upload_location)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryFirstAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.deliveryitem')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryCustomerLegalEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время заполнения')),
                ('is_legal_entity', models.BooleanField(blank=True, null=True, verbose_name='Является ли организация юридическим лицом (False, если ИП)')),
                ('full_name', models.TextField(blank=True, null=True, verbose_name='Полное наименование организации/ИП')),
                ('ceo', models.TextField(blank=True, null=True, verbose_name='Генеральный директор')),
                ('email', models.TextField(blank=True, null=True, verbose_name='Электронная почта')),
                ('phone', models.TextField(blank=True, null=True, verbose_name='Телефон')),
                ('legal_address', models.TextField(blank=True, null=True, verbose_name='Юридический адрес')),
                ('mail_address', models.TextField(blank=True, null=True, verbose_name='Почтовый адрес')),
                ('tax_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Идентификационный номер налогоплательщика (ИНН)')),
                ('reason_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Код причины постановки на учет (КПП)')),
                ('bank_name', models.TextField(blank=True, null=True, verbose_name='Наименование банка')),
                ('bank_identification_code', models.TextField(blank=True, null=True, verbose_name='БИК')),
                ('bank_account', models.TextField(blank=True, null=True, verbose_name='Расчетный счет')),
                ('correspondent_account', models.TextField(blank=True, null=True, verbose_name='Корреспондентский счет')),
                ('registration_confirmed', models.BooleanField(default=False, verbose_name='Регистрация подтверждена')),
                ('postpayment_allowed', models.BooleanField(default=False, verbose_name='Разрешена постоплата')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='DeductionsFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('data_file', models.FileField(upload_to=the_redhuman_is.models.fine_utils._deductions_file_upload_location)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deductions_files', to='the_redhuman_is.customer', verbose_name='Клиент')),
                ('operations_pack', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deductions_file', to='the_redhuman_is.operationspack', verbose_name='Группа операций')),
            ],
        ),
        migrations.CreateModel(
            name='DailyReconciliationNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('hours', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_ok', models.BooleanField()),
                ('recipient_email', models.EmailField(max_length=254)),
                ('confirmation_key', models.UUIDField(null=True)),
                ('attachment', models.FileField(max_length=255, upload_to=the_redhuman_is.models.delivery.daily_reconciliation_message_upload_location)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_notifications', to=settings.AUTH_USER_MODEL)),
                ('reconciliation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.dailyreconciliation', verbose_name='Сверка')),
            ],
        ),
        migrations.CreateModel(
            name='DailyReconciliationConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время подтверждения')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('reconciliation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.dailyreconciliation', verbose_name='Сверка')),
            ],
        ),
        migrations.AddField(
            model_name='customerservice',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.service'),
        ),
        migrations.CreateModel(
            name='CustomerOrderSoftNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soft_notification', to='the_redhuman_is.customerorder')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerOrderHardNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hard_notification', to='the_redhuman_is.customerorder')),
            ],
        ),
        migrations.AddField(
            model_name='customerorder',
            name='timesheet',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.timesheet'),
        ),
        migrations.CreateModel(
            name='CustomerOperatingAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_10_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_10_root_accounts', to='finance.account', verbose_name='10 Корень')),
                ('account_20_foreman', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_foremans', to='finance.account', verbose_name='20 Бригадиры')),
                ('account_20_other', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_other_accounts', to='finance.account', verbose_name='20 Прочее')),
                ('account_20_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_root_accounts', to='finance.account', verbose_name='20 Корень')),
                ('account_62_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_62_root_accounts', to='finance.account', verbose_name='62 Корень')),
                ('account_76_debts', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_76_debts_accounts', to='finance.account', verbose_name='76 Непроактированные долги')),
                ('account_76_fines', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_76_fines_accounts', to='finance.account', verbose_name='76 Штрафы')),
                ('account_76_sales', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_76_sales_accounts', to='finance.account', verbose_name='76 Непроактированные продажи')),
                ('account_90_1_disciplinary_deductions', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_1_disciplinary_deduction_accounts', to='finance.account', verbose_name='90 1 Вычеты дисциплинарные')),
                ('account_90_1_fine_based_deductions', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_1_fine_based_deduction_accounts', to='finance.account', verbose_name='90 1 Вычеты на основании штрафов')),
                ('account_90_1_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_1_root_accounts', to='finance.account', verbose_name='90 1 Корень')),
                ('account_90_2_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_2_root_accounts', to='finance.account', verbose_name='90 2 Корень')),
                ('account_90_3_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_3_root_accounts', to='finance.account', verbose_name='90 3 Корень')),
                ('account_90_9_root', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_9_root_accounts', to='finance.account', verbose_name='90 9 Корень')),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_accounts', to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerLegalEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_day', models.DateField(verbose_name='Первый день периода')),
                ('last_day', models.DateField(blank=True, null=True, verbose_name='Последний день периода')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='legal_entities', to='the_redhuman_is.customer', verbose_name='Клиент')),
                ('legal_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='the_redhuman_is.legalentity', verbose_name='Юрлицо')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerIndustrialAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_20', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_20_industrial_accounts', to='finance.account')),
                ('account_90_1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_90_1_industrial_accounts', to='finance.account')),
                ('cost_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_accounts', to='the_redhuman_is.industrialcosttype', verbose_name='Статьи расходов')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='industrial_accounts', to='the_redhuman_is.customer')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerFineDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deduction', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deductions', to='finance.operation')),
                ('fine', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fines', to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerFine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='finance.operation')),
                ('turnout', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerDepositAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Размер залога')),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='deposit_setting', to='the_redhuman_is.customer', verbose_name='Клиент')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Customer10SubAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_10', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_10_subaccounts', to='finance.account')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_10_sub_accounts', to='the_redhuman_is.customer')),
                ('material_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.materialtype')),
            ],
        ),
        migrations.CreateModel(
            name='CustComments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='Дата создания')),
                ('text', models.TextField(blank=True, max_length=100, null=True, verbose_name='Комментарий')),
                ('task_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата следующего контакта')),
                ('task_text', models.TextField(blank=True, max_length=100, null=True, verbose_name='Задача')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.customer')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Creditor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('account_67', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.account')),
            ],
        ),
        migrations.CreateModel(
            name='ContractorProxy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('number', models.CharField(max_length=20, verbose_name='Номер доверенности')),
                ('issue_date', models.DateField(verbose_name='Дата доверенности')),
                ('contractor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.contractor')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker')),
            ],
        ),
        migrations.AddField(
            model_name='contract',
            name='c_worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract', to='the_redhuman_is.worker'),
        ),
        migrations.AddField(
            model_name='contract',
            name='contractor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contracts', to='the_redhuman_is.contractor'),
        ),
        migrations.CreateModel(
            name='ConditionalCalculator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter', models.CharField(max_length=100, verbose_name='Параметр условия')),
                ('threshold', models.FloatField(verbose_name='Граница условия')),
                ('calc_lt_object_id', models.PositiveIntegerField()),
                ('calc_gte_object_id', models.PositiveIntegerField()),
                ('calc_gte_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='calc_gte', to='contenttypes.contenttype')),
                ('calc_lt_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='calc_lt', to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='CommissionOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='co_commissions', to='finance.operation')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='co_operations', to='finance.operation')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('text', models.TextField()),
                ('object_id', models.PositiveIntegerField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorTurnouts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threshold', models.IntegerField(verbose_name='Выходы')),
                ('calc1_object_id', models.PositiveIntegerField()),
                ('calc2_object_id', models.PositiveIntegerField()),
                ('calc1_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='calc1', to='contenttypes.contenttype')),
                ('calc2_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='calc2', to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorHourlyInterval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conditions', models.ManyToManyField(to='the_redhuman_is.Pair')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorForemanWorkers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conditions', models.ManyToManyField(to='the_redhuman_is.Pair')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorForemanOutputSum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conditions', models.ManyToManyField(to='the_redhuman_is.Pair')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorForeman',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calc1_object_id', models.PositiveIntegerField()),
                ('calc2_object_id', models.PositiveIntegerField()),
                ('calc1_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='foreman_calc1', to='contenttypes.contenttype')),
                ('calc2_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='foreman_calc2', to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='CalculatorBoxes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performance_for_linear_payment', models.IntegerField(null=True, verbose_name='Граница чистой сделки')),
                ('coefficient', models.DecimalField(decimal_places=2, max_digits=8, null=True, verbose_name='Плата за коробку')),
                ('conditions', models.ManyToManyField(to='the_redhuman_is.Pair')),
            ],
        ),
        migrations.AddField(
            model_name='boxtype',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.customer', verbose_name='Клиент'),
        ),
        migrations.CreateModel(
            name='BoxPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=4, max_digits=8, verbose_name='Плата за коробку')),
                ('box_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.boxtype', verbose_name='Тип товара')),
                ('calculator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='the_redhuman_is.calculatoroutput', verbose_name='Калькулятор')),
            ],
        ),
        migrations.CreateModel(
            name='BannedWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='banned', to='the_redhuman_is.worker', verbose_name='Работник')),
            ],
        ),
        migrations.CreateModel(
            name='BankServiceParams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calc_object_id', models.PositiveIntegerField()),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.account')),
                ('bank', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.bank')),
                ('calc_content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='service_params_calculator', to='contenttypes.contenttype')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.bankservice')),
            ],
        ),
        migrations.CreateModel(
            name='AssignedWorkerTurnout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время подтверждения')),
                ('assigned_worker', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='turnout', to='the_redhuman_is.assignedworker', verbose_name='Рабочий')),
                ('turnout', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход')),
            ],
        ),
        migrations.CreateModel(
            name='AssignedWorkerAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время назначения')),
                ('assigned_worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='the_redhuman_is.assignedworker', verbose_name='Рабочий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
        ),
        migrations.AddField(
            model_name='assignedworker',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assigned_workers', to='the_redhuman_is.deliveryrequest', verbose_name='Заявка'),
        ),
        migrations.AddField(
            model_name='assignedworker',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assigned_delivery_requests', to='the_redhuman_is.worker', verbose_name='Рабочий'),
        ),
        migrations.AddField(
            model_name='arrivallocation',
            name='location',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.location'),
        ),
        migrations.AddField(
            model_name='arrivallocation',
            name='worker',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.assignedworker', verbose_name='Рабочий'),
        ),
        migrations.CreateModel(
            name='AdministrationCostType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('account_26', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='finance.account')),
                ('account_90_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='admin_cost_type_90_2', to='finance.account')),
                ('account_90_9', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='admin_cost_type_90_9', to='finance.account')),
            ],
        ),
        migrations.CreateModel(
            name='Act',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата')),
                ('rko', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.rko', verbose_name='РКО')),
                ('turnout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.workerturnout', verbose_name='Выход для Акта')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.AddField(
            model_name='accountableperson',
            name='worker',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.worker', verbose_name='Подотчетное лицо'),
        ),
        migrations.CreateModel(
            name='AccountableDocumentOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='the_redhuman_is.documentwithaccountableperson', verbose_name='Документ')),
                ('operation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='finance.operation', verbose_name='Операция')),
            ],
        ),
        migrations.AddConstraint(
            model_name='workerselfemploymentdata',
            constraint=models.UniqueConstraint(condition=models.Q(('deletion_ts__isnull', True)), fields=('worker',), name='unique_actual_data'),
        ),
        migrations.AddConstraint(
            model_name='workerregistration',
            constraint=models.UniqueConstraint(condition=models.Q(('is_actual', True)), fields=('workers_id',), name='unique_actual_registration'),
        ),
        migrations.AddConstraint(
            model_name='workerpatent',
            constraint=models.UniqueConstraint(condition=models.Q(('is_actual', True)), fields=('workers_id',), name='unique_actual_patent'),
        ),
        migrations.AddConstraint(
            model_name='workerpassport',
            constraint=models.UniqueConstraint(condition=models.Q(('is_actual', True)), fields=('workers_id',), name='unique_actual_passport'),
        ),
        migrations.AddConstraint(
            model_name='uniquerecord',
            constraint=models.UniqueConstraint(fields=('content_type',), name='unique_record_model_constraint'),
        ),
        migrations.AddConstraint(
            model_name='requestworker',
            constraint=models.UniqueConstraint(fields=('request', 'worker'), name='unique_request_worker'),
        ),
        migrations.AddIndex(
            model_name='plannedcontact',
            index=models.Index(fields=['worker', '-timestamp'], name='plannedcontact_worker_ts_idx'),
        ),
        migrations.AddIndex(
            model_name='photo',
            index=models.Index(fields=['content_type', 'object_id'], name='photo_contenttype_object_index'),
        ),
        migrations.AddConstraint(
            model_name='payoutrequest',
            constraint=models.UniqueConstraint(condition=models.Q(('paysheet_entry__isnull', True)), fields=('worker',), name='unique_outstanding_payout_request'),
        ),
        migrations.AddConstraint(
            model_name='onlinesignup',
            constraint=models.UniqueConstraint(fields=('worker', 'date'), name='online_signup_unique_worker_date'),
        ),
        migrations.AddConstraint(
            model_name='normalizedaddress',
            constraint=models.UniqueConstraint(fields=('location', 'version'), name='normalized_address_unique_location_version'),
        ),
        migrations.AddIndex(
            model_name='mobileappstatus',
            index=models.Index(fields=['user', 'timestamp'], name='mobileappstatus_user_ts_index'),
        ),
        migrations.AlterUniqueTogether(
            name='metrobranch',
            unique_together={('color', 'city'), ('number', 'city'), ('name', 'city')},
        ),
        migrations.AddConstraint(
            model_name='itemworker',
            constraint=models.UniqueConstraint(fields=('item', 'requestworker'), name='unique_item_requestworker'),
        ),
        migrations.AddConstraint(
            model_name='googlemapsaddress',
            constraint=models.UniqueConstraint(fields=('location', 'version'), name='googlemaps_address_unique_location_version'),
        ),
        migrations.AddIndex(
            model_name='deliveryrequest',
            index=models.Index(fields=['location', 'date'], name='deliveryreq_location_date_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailyreconciliation',
            unique_together={('date', 'location')},
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['content_type', 'object_id', '-timestamp'], name='comment_object_ts_idx'),
        ),
        migrations.CreateModel(
            name='KariFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False,
                                           verbose_name='ID')),
                ('timestamp',
                 models.DateTimeField(auto_now_add=True, verbose_name='Время импорта')),
                ('data_file', models.FileField(upload_to=_kari_upload_location)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,
                                             to=settings.AUTH_USER_MODEL,
                                             verbose_name='Автор')),
            ],
        ),
    ]
